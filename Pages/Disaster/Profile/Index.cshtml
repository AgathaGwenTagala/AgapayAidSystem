@page
@model AgapayAidSystem.Pages.Disaster.Profile.IndexModel
@{
    string pageTitle = $"{Model.disasterInfo.disasterName}";
    ViewData["Title"] = pageTitle;
}

<!-- Alert Banners -->
@if (!string.IsNullOrEmpty(Request.Query["successMessage"]))
{
    <div id="success-notification" class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>@Request.Query["successMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>

    <script>
        const successNotification = document.getElementById('success-notification');
        if (successNotification) {
            setTimeout(function () {
                successNotification.style.display = 'none';
            }, 5000); // 5000 milliseconds = 5 seconds
        }
    </script>
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Model.errorMessage</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Request.Query["errorMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<style>
    /* Adjust the size of the DataTable search input */
    div.dataTables_wrapper div.dataTables_filter input {
        width: 150px;
        margin-right: 10px;
    }
</style>

<input type="hidden" name="disasterID" value="@Model.disasterInfo.disasterID" />

<!-- Breadcrumb -->
<div class="row pb-2" aria-label="breadcrumb">
    <nav style="--bs-breadcrumb-divider: '/';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/index"><i class="bi bi-house-door-fill" style="padding: 5px;"></i>Home</a></li>
            <li class="breadcrumb-item"><a href="/disaster/index">Disaster</a></li>
            <li class="breadcrumb-item active"><a><strong>@Model.disasterInfo.disasterName</strong></a></li>
        </ol>
    </nav>
</div>

<!-- Title, Info Button, Menu Button -->
<div class="row">
    <div class="col-12 d-flex align-items-center justify-content-between">
        <h1>@Model.disasterInfo.disasterName</h1>

        <div class="d-flex gap-2 justify-content-end align-items-center">
            <!-- Button with text and icon (visible on larger screens) -->
            <button class="btn btn-primary d-none d-md-inline-block text-white"
                    onclick="showInfo('@Model.disasterInfo.disasterType', '@Model.disasterInfo.description', '@Model.disasterInfo.dateOccured')"
                    data-bs-toggle="modal" data-bs-target="#infoModal">
                <i class="bi bi-info-circle-fill" style="color:white"></i> Info
            </button>

            <!-- Button with icon only (visible on smaller screens) -->
            <button class="btn btn-primary d-inline-block d-md-none text-white"
                    onclick="showInfo('@Model.disasterInfo.disasterType', '@Model.disasterInfo.description', '@Model.disasterInfo.dateOccured')"
                    data-bs-toggle="modal" data-bs-target="#infoModal">
                <i class="bi bi-info-circle-fill" style="color:white"></i>
            </button>

            <div class="d-inline position-relative">
                <a class="btn btn-primary" href="#" role="button" id="recordOptions" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-three-dots-vertical" style="color:white"></i>
                </a>
                <ul class="dropdown-menu" aria-labelledby="recordOptions">
                    <li>
                        <a class="dropdown-item" href="/disaster/profile/report?disasterID=@Model.disasterInfo.disasterID">
                            Generate Report
                        </a>
                    </li>
                    <li>
                        <a class="dropdown-item" href="/disaster/profile/edit?disasterID=@Model.disasterInfo.disasterID">
                            Edit
                        </a>
                    </li>
                    <li>
                        <a href="#" class="text-danger dropdown-item" onclick="prepareDelete('@Model.disasterInfo.disasterID')"
                           data-deleteid="@Model.disasterInfo.disasterID" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
                            Delete
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="content">
    <div class="table-container1">
        <div class="box-info">
            <div class="info-item">
                <i class="bi bi-people"></i>
                <div class="text">
                    <h3 class="distitle">@Model.GetTotalDistinctEvacueesCount()</h3>
                    <p><b>Total Evacuees</b></p>
                    <div class="box-stat">
                        <small>Check-in: <span>@Model.GetTotalCheckInCount()</span></small>
                        <small>Check-out: <span>@Model.GetTotalCheckOutCount()</span></small>
                    </div>
                </div>
            </div>

            <div class="info-item">
                <i class="bi bi-buildings-fill"></i>
                <div class="text">
                    <h3 class="distitle">@Model.GetTotalDistinctBarangaysCount()</h3>
                    <p><b>Total Affected Brgys</b></p>
                    <div class="box-stat">
                        <small>Families: <span>@Model.GetTotalDistinctFamiliesCount()</span></small>
                        <small>Male: <span>@Model.GetTotalDistinctFemaleCount()</span></small>
                        <small>Female: <span>@Model.GetTotalDistinctMaleCount()</span></small>
                    </div>
                </div>
            </div>  
        
            <div class="info-item">
                <i class="bi bi-building-fill"></i></i>
                <div class="text">
                    <h3 class="distitle">@Model.GetTotalCenterCount()</h3>
                    <p><b>Total Evacuation Centers</b></p>
                    <div class="box-stat">
                        <small>Open: <span>@Model.GetTotalOpenCenterCount()</span></small>
                        <small>Closed: <span>@Model.GetTotalClosedCenterCount()</span></small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<br />

<!-- Title and Allocate Button-->
<div class="row pb-1 mb-2">
    <div class="col-12 d-flex align-items-center justify-content-between">
        <h1><i class="bi bi-building-fill" style="padding-right:5px;"></i>Evacuation Center</h1>

        <div class="d-flex justify-content-end align-items-center">
            <a class="btn btn-primary mb-2 d-none d-md-inline" href="/disaster/profile/allocateec?disasterID=@Model.disasterInfo.disasterID">
                <i class="bi bi-building-add" style="padding-right: 5px;"></i>
                Allocate Evacuation Center
            </a>
            <a class="btn btn-primary mb-2 d-md-none" href="/disaster/profile/allocateec?disasterID=@Model.disasterInfo.disasterID">
                <i class="bi bi-building-add"></i>
            </a>
        </div>
    </div>
</div>

<!-- Table -->
<div class="row">
    <div style="overflow-x: auto; max-width: 100%;">
        <table id="eclog-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Barangay</th>
                <th>Occupancy</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @{
                var counter = 1;
            }
            @foreach (var item in Model.listCenterLog)
            {
                <tr>
                    <td width="5%">@counter</td>
                    <td width="25%">@item.centerName</td>
                    <td width="25%">@item.barangayName</td>
                    <td width="20%">
                        <div class="progress-container">
                            <!-- Progress bar will be added dynamically here -->
                        </div>
                        <span class="occupancy-text">@item.occupancy/@item.maxCapacity</span>
                    </td>
                    <td width="15%" style="text-align: center;">
                        @if (@item.status == "Open")
                        {
                            <span class="badge bg-success">@item.status</span>
                        }
                        else if (@item.status == "Closed")
                        {
                            <span class="badge rounded-pill bg-light">@item.status</span>
                        }
                    </td>
                    <td width="10%">
                        <div class="position-relative">
                        <a class="btn btn-success edit-button" href="/disaster/profile/informationboard/index?centerLogID=@item.centerLogID">
                            <span>View</span>
                        </a>
                        @if (@Model.GetNotificationCount(@item.centerLogID) != 0)
                        {
                                    <span class="badge rounded-pill bg-danger position-absolute top-0 end-0 translate-middle translate-middle-y">@Model.GetNotificationCount(@item.centerLogID)</span>
                        }
                        </div>
                    </td>
                </tr>
                counter++;
            }
        </tbody>
    </table>
    </div>
</div>

<!-- Modal: Disaster Information -->
<div class="modal fade" id="infoModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Disaster Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table>
                    <tr>
                        <th class="text-start pe-4">Type</th>
                        <td id="disasterType" class="text-start"></td>
                    </tr>
                    <tr>
                        <th class="text-start pe-4">Description</th>
                        <td id="description" class="text-start"></td>
                    </tr>
                    <tr>
                        <th class="text-start pe-4">Date Occurred</th>
                        <td id="dateOccured" class="text-start"></td>
                    </tr>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Disaster Information Modal -->
<script>
    function showInfo(disasterType, description, dateOccured) {
        // Set the content of the modal with the provided info
        document.getElementById('disasterType').innerText = disasterType;
        document.getElementById('description').innerText = description;
        document.getElementById('dateOccured').innerText = dateOccured;
    }
</script>

<!-- Modal: Confirm Delete -->
<div class="modal" id="deleteConfirmationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this disaster?</p>
                <p><strong class="text-danger">This cannot be undone.</strong></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Making the table responsive -->
<script>
    $(document).ready(function () {
        var table = $('#eclog-table').DataTable({
            responsive: false,
            pageLength: 25,
            columnDefs: [
                { "orderable": true, "targets": [0, 1,] }, // Sortable columns
                { "orderable": false, "targets": [2, 3, 4, 5] } // Non-sortable columns
            ],
            initComplete: function () {
                var rows = this.api().rows({ page: 'current' }).nodes();

                for (var i = 0; i < rows.length; i++) {
                    updateOccupancyBar(rows[i]);
                }
            }
        });

        table.columns([2, 4]).every(function () {
            var column = this;
            var filterContainer = $('<div class="dropdown align-items-center d-inline-flex ps-2"></div>').appendTo($(column.header()));
            var btn = $('<button class="btn btn-sm btn-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="bi bi-funnel"></i></button>').appendTo(filterContainer);
            var menu = $('<div class="dropdown-menu p-3"></div>').appendTo(filterContainer);

            function updateFilterButton() {
                var hasActiveFilter = column.search() !== '';
                btn.toggleClass('btn-warning', hasActiveFilter);
            }

            function escapeRegExp(string) {
                return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            }

            column.data().unique().sort().each(function (d, j) {
                // Only add the options "Check-in" and "Check-out" for the "Status" column
                if (column.index() === 4) {
                    // Set specific filter options only if they haven't been added
                    if (menu.find("input[value='Open']").length === 0) {
                        menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Open">' +
                            '<label class="form-check-label ps-1">Open</label></div>');
                    }
                    if (menu.find("input[value='Closed']").length === 0) {
                        menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Closed">' +
                            '<label class="form-check-label ps-1">Closed</label></div>');
                    }
                }

                // For other columns, show all unique values as filter options
                else {
                    menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="' + d + '">' +
                        '<label class="form-check-label ps-1">' + d + '</label></div>');
                }
            });


            menu.prepend('<div class="form-check"><input class="form-check-input select-all" type="checkbox" value="select-all">' +
                '<label class="form-check-label ps-1">Select All</label></div>');

            menu.append('<hr class="dropdown-divider"><div class="p-1"><button type="button" class="btn btn-sm btn-light clear-filter"><i class="bi bi-eraser pe-1"></i>Clear Filter</button></div>');

            menu.find('.form-check-input, .clear-filter').on('click', function () {
                var checked = $(this).prop('checked');

                if ($(this).hasClass('form-check-input')) {
                    if ($(this).val() === 'select-all') {
                        menu.find('.form-check-input').prop('checked', checked);
                    } else if (!checked) {
                        menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                    }
                } else {
                    menu.find('.form-check-input').prop('checked', false);
                    menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                }

                var selectedValues = menu.find('.form-check-input:checked').map(function () {
                    return $(this).val();
                }).get();

                column.search(selectedValues.length > 0 ? '^(' + selectedValues.map(escapeRegExp).join('|') + ')$' : '', true, false).draw();
                updateFilterButton();
            });
            updateFilterButton();
        });

        // Occupancy progress bar
        function updateOccupancyBar(row) {
            var occupancyCell = row.cells[3];
            var occupancyText = occupancyCell.textContent.trim();
            var occupancyValues = occupancyText.split('/');
            var occupancy = parseInt(occupancyValues[0]);
            var totalCapacity = parseInt(occupancyValues[1]);
            var percentage = (occupancy / totalCapacity) * 100;

            var progressBar = document.createElement('div');
            progressBar.className = 'progress-bar';

            if (percentage > 100) {
                progressBar.style.backgroundColor = '#FF5A57';
            }

            progressBar.style.width = percentage + '%';

            var progressContainer = document.createElement('div');
            progressContainer.className = 'progress';
            progressContainer.appendChild(progressBar);

            occupancyCell.innerHTML = ''; // Clear existing content
            occupancyCell.appendChild(progressContainer);
            occupancyCell.insertAdjacentHTML('beforeend', occupancyText);
        }
    });
</script>

<!-- Confirm Delete button in Modal -->
<script>
    const deleteButtons = document.querySelectorAll('.edit-button');
    let disasterIdToDelete = null;

    deleteButtons.forEach(function (button) {
        button.addEventListener('click', function () {
            disasterIdToDelete = this.getAttribute('data-deleteid');
        });
    });

    // Function to prepare for delete action
    function prepareDelete(disasterID) {
        if (disasterID === null || disasterID === undefined) {
            // Retrieve disasterID from the button's data-deleteid attribute
            disasterIdToDelete = event.currentTarget.getAttribute('data-deleteid');
        } else {
            disasterIdToDelete = disasterID;
        }
    }

    const confirmDeleteButton = document.getElementById('confirmDeleteButton');

    confirmDeleteButton.addEventListener('click', function () {
        if (disasterIdToDelete !== null) {
            window.location.href = "/disaster/profile/delete?disasterID=" + disasterIdToDelete;
        }
    });
</script>