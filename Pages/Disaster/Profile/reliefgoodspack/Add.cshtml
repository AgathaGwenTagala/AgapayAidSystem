@page
@model AgapayAidSystem.Pages.Disaster.Profile.reliefgoodspack.AddModel
@{
    ViewData["Title"] = "Add Relief Goods Pack";
}

<!-- Alert Banners -->
@if (!string.IsNullOrEmpty(Model.errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Model.errorMessage</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Request.Query["errorMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<style>
    /* Adjust the size of the DataTable search input */
    div.dataTables_wrapper div.dataTables_filter input {
        width: 150px;
        margin-right: 10px;
    }
</style>

<div class="bg-light rounded px-2 py-0 my-3">
    <form method="POST" id="addpack">
        <h1 class="display-5 fw-bold text-center">Add Relief Goods Pack</h1>
        <br />

        <input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />

        <!-- Pack Quantity -->
        <div class="row justify-content-center">
            <div class="col-md-4">
                <div class="mb-3">
                    <div class="d-flex align-items-center">
                        <label class="form-label">
                            Quantity of Total Packs:
                            <span class="text-danger" style="padding: 5px">*</span>
                        </label>
                        <input type="number" class="form-control input-pack" name="packQty" id="packQty" placeholder="0" step="1" min="0" required />
                    </div>
                </div>
            </div>
        </div>

        <!-- Inclusion Quantity -->
        <div class="row pt-4">
            <div class="col-lg-12">
                <div style="overflow-x: auto; max-width: 100%;">
                    <table id="inclusion-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
                    <thead>
                        <tr style="vertical-align:text-top;">
                            <th>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAllCheckboxes">
                                    <label class="form-check-label"></label>
                                </div>
                            </th>
                            <th>Item</th>
                            <th>Type</th>
                            <th>Unit Measure</th>
                            <th>Available Qty</th>
                            <th>Qty per Pack</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.listAvInventory)
                        {
                            <tr>
                                <td>
                                    <div class="form-check">
                                        <input class="form-check-input inclusion-checkbox" type="checkbox" value="@item.inventoryID" name="selectedInclusion[]">
                                        <label class="form-check-label"></label>
                                    </div>
                                </td>
                                <td width="20%">@item.itemName</td>
                                <td width="15%">@item.itemType</td>
                                <td width="20%">@item.unitMeasure</td>
                                <td width="20%">@item.remainingQty</td>
                                <td width="20%">
                                    <input type="number" class="form-control input-inclusion qty" name="qty[]" step="1" placeholder="0" min="0"
                                           data-max-qty="@item.remainingQty" disabled required />
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
                </div>
            </div>
        </div>
        <br />

        <!-- Cancel and Save Selection Button -->
        <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
            <a href="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID" role="button" class="btn btn-outline-secondary px-4 gap-3">Cancel</a>
            <button type="button" class="btn btn-primary px-4" name="saveSelection" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>
                Add
            </button>
        </div>
    </form>
</div>

<!-- Modal: Confirm Add -->
<div class="modal" id="confirmSaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Add</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to add this pack with the selected inclusions?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSaveButton">Add</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Making the table responsive
        var table = $('#inclusion-table').DataTable({
            responsive: false,
            pageLength: 100;
            columnDefs: [
                { "orderable": true, "targets": [1, 2, 3, 4] }, // Sortable columns
                { "orderable": false, "targets": [0, 5] } // Non-sortable columns
            ]
        });

        table.columns([2]).every(function () {
            var column = this;
            var filterContainer = $('<div class="dropdown align-items-center d-inline-flex ps-2"></div>').appendTo($(column.header()));
            var btn = $('<button class="btn btn-sm btn-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="bi bi-funnel"></i></button>').appendTo(filterContainer);
            var menu = $('<div class="dropdown-menu p-3"></div>').appendTo(filterContainer);

            function updateFilterButton() {
                var hasActiveFilter = column.search() !== '';
                btn.toggleClass('btn-warning', hasActiveFilter);
            }

            column.data().unique().sort().each(function (d, j) {
                menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="' + d + '">' +
                    '<label class="form-check-label ps-1">' + d + '</label></div>');
            });

            menu.prepend('<div class="form-check"><input class="form-check-input select-all" type="checkbox" value="select-all">' +
                '<label class="form-check-label ps-1">Select All</label></div>');

            menu.append('<hr class="dropdown-divider"><div class="p-1"><button type="button" class="btn btn-sm btn-light clear-filter"><i class="bi bi-eraser pe-1"></i>Clear Filter</button></div>');

            menu.find('.form-check-input, .clear-filter').on('click', function () {
                var checked = $(this).prop('checked');

                if ($(this).hasClass('form-check-input')) {
                    if ($(this).val() === 'select-all') {
                        menu.find('.form-check-input').prop('checked', checked);
                    } else if (!checked) {
                        menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                    }
                } else {
                    menu.find('.form-check-input').prop('checked', false);
                    menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                }

                var selectedValues = menu.find('.form-check-input:checked').map(function () {
                    return $(this).val();
                }).get();

                column.search(selectedValues.length > 0 ? '^(' + selectedValues.join('|') + ')$' : '', true, false).draw();
                updateFilterButton();
            });
            updateFilterButton();
        });

        // Disable checkboxes by default
        $('.inclusion-checkbox').prop('disabled', true);
        $('#selectAllCheckboxes').prop('disabled', true);

        // Disable "Qty per Pack" input fields by default
        $('input.qty').prop('disabled', true);

        // Handle checkbox state changes
        $('.inclusion-checkbox').on('change', function () {
            updateAddButtonState();
        });

        // Handle "Select All" checkbox
        $('#selectAllCheckboxes').on('change', function () {
            var selectAllCheckbox = $(this);
            var individualCheckboxes = $('.inclusion-checkbox');

            if (selectAllCheckbox.is(':checked')) {
                individualCheckboxes.prop('checked', true);
            } else {
                individualCheckboxes.prop('checked', false);
            }

            updateAddButtonState();
        });

        $('input[name="packQty"]').on('input', function () {
            updateAddButtonState();
        });

        $('input.qty').on('input', function () {
            updateAddButtonState();
        });

        function updateAddButtonState() {
            var packQty = parseInt($('input[name="packQty"]').val());
            var disableAdd = packQty <= 0 || $('.inclusion-checkbox:checked').length === 0;

            // Enable or disable the checkboxes based on packQty
            $('.inclusion-checkbox').prop('disabled', packQty <= 0);
            $('#selectAllCheckboxes').prop('disabled', packQty <= 0);

            // Enable or disable the "Qty per Pack" input fields based on checkboxes
            $('.inclusion-checkbox').each(function () {
                var checkbox = $(this);
                var input = checkbox.closest('tr').find('input.qty');

                if (checkbox.is(':checked') && packQty > 0) {
                    var remainingQty = parseInt(input.attr('data-max-qty'));
                    var maxQtyPerPack = Math.floor(remainingQty / packQty);

                    // Store maxQtyPerPack as a data attribute
                    input.data('maxQtyPerPack', maxQtyPerPack);

                    input.prop('disabled', false);
                    input.attr('max', maxQtyPerPack); // Set the max attribute based on maxQtyPerPack

                    var itemQty = parseInt(input.val());
                    if (itemQty <= 0 || itemQty > maxQtyPerPack) {
                        input.addClass('is-invalid'); // Add red border for invalid input
                        disableAdd = true;
                    } else {
                        input.removeClass('is-invalid'); // Remove red border for valid input
                    }
                } else {
                    input.prop('disabled', true);
                    input.val(0); // Clear the input when unchecked
                    input.removeClass('is-invalid'); // Remove red border
                }
            });

            // Enable or disable the "Add" button based on the conditions
            var addButton = $('button[name="saveSelection"]');
            addButton.prop('disabled', disableAdd);
        }
    });
</script>

<!-- Add button in Modal -->
<script>
    document.getElementById('confirmSaveButton').addEventListener('click', function () {
        document.getElementById('addpack').submit();
    });
</script>