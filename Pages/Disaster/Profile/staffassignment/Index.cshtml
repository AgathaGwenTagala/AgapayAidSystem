@page
@model AgapayAidSystem.Pages.disaster.profile.staffassignment.IndexModel
@{
	ViewData["Title"] = "Staff Assignment";
}

<!-- Alert Banners -->
@if (!string.IsNullOrEmpty(Request.Query["successMessage"]))
{
	<div id="success-notification" class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-success alert-dismissible fade show" role="alert">
			<strong>@Request.Query["successMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>

	<script>
		const successNotification = document.getElementById('success-notification');
		if (successNotification) {
			setTimeout(function () {
				successNotification.style.display = 'none';
			}, 5000); // 5000 milliseconds = 5 seconds
		}
	</script>
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Model.errorMessage</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Request.Query["errorMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

<style>
    /* Adjust the size of the DataTable search input */
    div.dataTables_wrapper div.dataTables_filter input {
        width: 150px;
        margin-right: 10px;
    }
</style>

<div class="container-fluid">
	<input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
	<div class="row">
		<!-- Sidebar (desktop) -->
		<nav id="sidebar" class="col-md-3 col-lg-3 d-md-block d-none sidebar">
			<div class="position-sticky">
				<ul class="nav flex-column">
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/informationboard/index?centerLogID=@Model.logInfo.centerLogID">Information Board</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/entrylog/index?centerLogID=@Model.logInfo.centerLogID">Entry Log</a>
					</li>
					<li class="nav-item">
						<a class="nav-link active" href="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID">Staff Assignment</a>
					</li>
					@if (@Model.GetRemainingInventoryCount() == 0)
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">
								Inventory
							</a>
						</li>
					}
					else
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">
								Inventory <span class="badge rounded-pill bg-primary ps-2">@Model.GetRemainingInventoryCount()</span>
							</a>
						</li>
					}

					@if (@Model.GetRemainingPackCount() == 0)
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">
								Relief Goods Pack
							</a>
						</li>
					}
					else
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">
								Relief Goods Pack <span class="badge rounded-pill bg-primary ps-2">@Model.GetRemainingPackCount()</span>
							</a>
						</li>
					}

					@if (@Model.GetRemainingAssessmentCount() == 0)
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">
								Vulnerability Assessment
							</a>
						</li>
					}
					else
					{
						<li class="nav-item">
							<a class="nav-link" href="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">
								Vulnerability Assessment <span class="badge rounded-pill bg-primary ps-2">@Model.GetRemainingAssessmentCount()</span>
							</a>
						</li>
					}
				</ul>
			</div>
		</nav>

		<!-- Sidebar (mobile) -->
		<div id="sidebarMobile" class="col-md-3 col-lg-3 d-md-none bg-light p-2">
			<select class="form-select" id="pageSelect">
				<option value="/disaster/profile/informationboard/index?centerLogID=@Model.logInfo.centerLogID">Information Board</option>
				<option value="/disaster/profile/entrylog/index?centerLogID=@Model.logInfo.centerLogID">Entry Log</option>
				<option value="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID">Staff Assignment</option>
				@if (@Model.GetRemainingInventoryCount() == 0)
				{
					<option value="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">Inventory</option>
				}
				else
				{
					<option value="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">
						Inventory <span>(@Model.GetRemainingInventoryCount())</span>
					</option>
				}

				@if (@Model.GetRemainingPackCount() == 0)
				{
					<option value="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">Relief Goods Pack</option>
				}
				else
				{
					<option value="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">
						Relief Goods Pack <span>(@Model.GetRemainingPackCount())</span>
					</option>
				}

				@if (@Model.GetRemainingAssessmentCount() == 0)
				{
					<option value="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">Vulnerability Assessment</option>
				}
				else
				{
					<option value="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">
						Vulnerability Assessment <span>(@Model.GetRemainingAssessmentCount())</span>
					</option>
				}

			</select>
		</div>


		<!-- Page Content -->
		<div class="col-md-9 ms-sm-auto col-lg-9 px-md-4 pb-3 pt-3">
			<div class="container">
				<!-- Breadcrumb -->
				<div class="row pb-2" aria-label="breadcrumb">
					<nav style="--bs-breadcrumb-divider: '/';" aria-label="breadcrumb">
						<ol class="breadcrumb">
							<li class="breadcrumb-item"><a href="/index"><i class="bi bi-house-door-fill" style="padding: 5px;"></i>Home</a></li>
							<li class="breadcrumb-item"><a href="/disaster/index">Disaster</a></li>
							<li class="breadcrumb-item"><a href="/disaster/profile/index?disasterID=@Model.logInfo.disasterID">@Model.logInfo.disasterName</a></li>
							<li class="breadcrumb-item active"><a><strong>@Model.logInfo.centerName</strong></a></li>
						</ol>
					</nav>
				</div>

				<!-- Title, Add and Mark Completed Buttons -->
				<form method="POST" id="completeAssign" style="padding: 0px;">
					<input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
					@if (@Model.logInfo.status == "Open")
					{
						<div class="row pb-2">
							<div class="col d-flex align-items-center">
								<h1>Staff Assignment</h1>
							</div>
							<div class="col-auto d-flex justify-content-between align-items-center" style="gap: 5px">
								<a id="addButton" class="btn btn-primary mb-2 d-none d-sm-inline" href="/disaster/profile/staffassignment/add?centerLogID=@Model.logInfo.centerLogID">
									<i class="bi bi-plus-circle pt" style="padding: 5px;"></i> Assign Staff
								</a>
								<a id="addButtonSmall" class="btn btn-primary mb-2 d-sm-none" href="/disaster/profile/staffassignment/add?centerLogID=@Model.logInfo.centerLogID">
									<i class="bi bi-plus-circle pt" style="padding: 5px;"></i>
								</a>

								<button id="completeButton" type="button" class="btn btn-danger mb-2 d-none d-sm-inline" name="saveSelection" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>
									<i class="bi bi-check-circle pt" style="padding: 5px;"></i> Mark Completed
								</button>
								<button id="completeButtonSmall" type="button" class="btn btn-danger mb-2 d-sm-none" name="saveSelectionSmall" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>
									<i class="bi bi-check-circle pt" style="padding: 5px;"></i>
								</button>
							</div>
						</div>
					}
					else if (@Model.logInfo.status == "Closed")
					{
						<div class="row pb-2">
							<div class="col d-flex align-items-center">
								<h1>Staff Assignment</h1>
							</div>
						</div>
					}
					<div class="col-lg-12">
						<div style="overflow-x: auto; max-width: 100%;">
							<table id="assignment-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
								<thead>
									<tr>
										<th>
											@if (@Model.logInfo.status == "Open")
											{
												<div class="form-check">
													<input class="form-check-input" type="checkbox" id="selectAllCheckboxes">
													<label class="form-check-label"></label>
												</div>
											}
											else if (@Model.logInfo.status == "Closed")
											{
												<text>#</text>
											}
										</th>
										<th>Name</th>
										<th>Sex</th>
										<th>Role</th>
										<th>Status</th>
										<th></th>
									</tr>
								</thead>
								<tbody>
									@{ var counter = 1; }
									@foreach (var item in Model.listAssignment)
									{
										<tr>
											<td width="5%">
												@if (@Model.logInfo.status == "Open")
												{
													<div class="form-check">
														<input class="form-check-input" type="checkbox" value="@item.assignmentID"
															   name="selectedStaff[]" @((item.status == "Completed") ? "disabled" : "")>
														<label class="form-check-label"></label>
													</div>
												}
												else if (@Model.logInfo.status == "Closed")
												{
													@counter
												}
											</td>
											<td width="35%" style="text-align:left;">@item.fullName</td>
											<td width="15%">@item.sex</td>
											<td width="20%">@item.role</td>
											<td width="20%">
												@if (@item.status == "Assigned")
												{
													<span class="badge bg-success">@item.status</span>
												}
												else if (@item.status == "Completed")
												{
													<span class="badge rounded-pill bg-light">@item.status</span>
												}
											</td>
											<td width="5%">
												<div class="d-inline position-relative">
													<a href="#" role="button" id="recordOptions" data-bs-toggle="dropdown" aria-expanded="false">
														<i class="bi bi-three-dots-vertical"></i>
													</a>
													<ul class="dropdown-menu" aria-labelledby="recordOptions">
														<li>
															<a href="#" class="dropdown-item"
															   onclick="showStaffInfo('@item.fullName', '@item.sex', '@item.age', '@item.birthdate', '@item.mobileNum', '@item.emailAddress')"
															   data-bs-toggle="modal" data-bs-target="#profileModal">
																View Profile
															</a>
														</li>
														<li>
															<a href="#" class="dropdown-item" onclick="showDatesPopup('@item.assignmentDate', '@item.completionDate')"
															   data-bs-toggle="modal" data-bs-target="#datesModal">
																View Assignment Details
															</a>
														</li>
														@if (@Model.logInfo.status == "Open")
														{
															<li>
																<a href="#" class="dropdown-item text-danger" onclick="prepareDelete('@item.assignmentID')"
																   data-deleteid="@item.assignmentID" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
																	Delete
																</a>
															</li>
														}
														else if (@Model.logInfo.status == "Closed")
														{
														}
													</ul>
												</div>
											</td>
										</tr>
										counter++;
									}
								</tbody>
							</table>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Modal: Confirm Complete Assignment -->
<div class="modal" id="confirmSaveModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Complete Assignment</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to mark the assignment of the selected EC staff members as complete?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmSaveButton">Mark Completed</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal: View Assignment Details -->
<div class="modal fade" id="datesModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Assignment Details</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<table>
					<tr>
						<th class="text-start pe-4">Date Assigned</th>
						<td id="assignmentDate" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Date Completed</th>
						<td id="completionDate" class="text-start"></td>
					</tr>
				</table>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<!-- Assignment Details Modal -->
<script>
	function showDatesPopup(assignmentDate, completionDate) {
		// Set the content of the modal with the provided dates
		document.getElementById('assignmentDate').innerText = assignmentDate;
		document.getElementById('completionDate').innerText = completionDate || "-";
	}
</script>

<!-- Modal: View Profile -->
<div class="modal fade" id="profileModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Staff Profile</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<table>
					<tr>
						<th class="text-start pe-4">Name</th>
						<td id="fullName" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Sex</th>
						<td id="sex" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Age</th>
						<td id="age" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Birthdate</th>
						<td id="birthdate" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Mobile Number</th>
						<td id="mobileNum" class="text-start"></td>
					</tr>
					<tr>
						<th class="text-start pe-4">Email Address</th>
						<td id="emailAddress" class="text-start"></td>
					</tr>
				</table>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<!-- Staff Profile Modal -->
<script>
	function showStaffInfo(fullName, sex, age, birthdate, mobileNum, emailAddress) {
		// Set the content of the modal with the provided staff info
		document.getElementById('fullName').innerText = fullName;
		document.getElementById('sex').innerText = sex;
		document.getElementById('age').innerText = age;
		document.getElementById('birthdate').innerText = birthdate;
		document.getElementById('mobileNum').innerText = mobileNum;
		document.getElementById('emailAddress').innerText = emailAddress;
	}
</script>

<!-- Modal: Confirm Delete -->
<div class="modal" id="deleteConfirmationModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to delete this staff assignment record?</p>
				<p><strong class="text-danger">This cannot be undone.</strong></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
			</div>
		</div>
	</div>
</div>

<!-- Sidebar (Mobile) -->
<script>
	// Get the current page URL
	var currentPage = window.location.pathname.toLowerCase();

	// Get the select element
	var pageSelect = document.getElementById('pageSelect');

	// Loop through the options and set the selected attribute if it matches the current page
	for (var i = 0; i < pageSelect.options.length; i++) {
		if (pageSelect.options[i].value.toLowerCase().includes(currentPage)) {
			pageSelect.options[i].selected = true;
			break; // Exit the loop once the first match is found
		}
	}

	// Function to handle page redirection
	function redirectToSelectedPage() {
		var selectedOption = pageSelect.options[pageSelect.selectedIndex];
		var selectedValue = selectedOption.value;
		window.location.href = selectedValue;
	}

	// Attach the onchange event to the select element
	pageSelect.addEventListener('change', redirectToSelectedPage);
</script>

<!-- Making the table responsive -->
<script>
	$(document).ready(function () {
		var table = $('#assignment-table').DataTable({
			responsive: false,
			pageLength: 25,
			columnDefs: [
				{ "orderable": true, "targets": [1] }, // Sortable columns
				{ "orderable": false, "targets": [0, 2, 3, 4, 5] } // Non-sortable columns
			]
		});

		table.columns([2, 3, 4]).every(function () {
			var column = this;
			var filterContainer = $('<div class="dropdown align-items-center d-inline-flex ps-2"></div>').appendTo($(column.header()));
			var btn = $('<button class="btn btn-sm btn-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="bi bi-funnel"></i></button>').appendTo(filterContainer);
			var menu = $('<div class="dropdown-menu p-3"></div>').appendTo(filterContainer);

			function updateFilterButton() {
				var hasActiveFilter = column.search() !== '';
				btn.toggleClass('btn-warning', hasActiveFilter);
			}

			column.data().unique().sort().each(function (d, j) {
				// Only add the options "Check-in" and "Check-out" for the "Status" column
				if (column.index() === 4) {
					// Set specific filter options only if they haven't been added
					if (menu.find("input[value='Assigned']").length === 0) {
						menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Assigned">' +
							'<label class="form-check-label ps-1">Assigned</label></div>');
					}
					if (menu.find("input[value='Completed']").length === 0) {
						menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Completed">' +
							'<label class="form-check-label ps-1">Completed</label></div>');
					}
				}

				// For other columns, show all unique values as filter options
				else {
					menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="' + d + '">' +
						'<label class="form-check-label ps-1">' + d + '</label></div>');
				}
			});


			menu.prepend('<div class="form-check"><input class="form-check-input select-all" type="checkbox" value="select-all">' +
				'<label class="form-check-label ps-1">Select All</label></div>');

			menu.append('<hr class="dropdown-divider"><div class="p-1"><button type="button" class="btn btn-sm btn-light clear-filter"><i class="bi bi-eraser pe-1"></i>Clear Filter</button></div>');

			menu.find('.form-check-input, .clear-filter').on('click', function () {
				var checked = $(this).prop('checked');

				if ($(this).hasClass('form-check-input')) {
					if ($(this).val() === 'select-all') {
						menu.find('.form-check-input').prop('checked', checked);
					} else if (!checked) {
						menu.find('.form-check-input[value="select-all"]').prop('checked', false);
					}
				} else {
					menu.find('.form-check-input').prop('checked', false);
					menu.find('.form-check-input[value="select-all"]').prop('checked', false);
				}

				var selectedValues = menu.find('.form-check-input:checked').map(function () {
					return $(this).val();
				}).get();

				column.search(selectedValues.length > 0 ? '^(' + selectedValues.join('|') + ')$' : '', true, false).draw();
				updateFilterButton();
			});
			updateFilterButton();
		});
	});
</script>

<!-- Select All checkboxes and Enable/disable "Check-out" button -->
<script>
	const selectAllCheckbox = document.getElementById('selectAllCheckboxes');
	const checkboxes = document.querySelectorAll('input[name="selectedStaff[]"]');
	const saveSelectionButton = document.querySelector('button[name="saveSelection"]');
	const saveSelectionButtonSmall = document.querySelector('button[name="saveSelectionSmall"]');

	// Event listener for the "Select All" checkbox
	selectAllCheckbox.addEventListener('change', function () {
		checkboxes.forEach(checkbox => {
			if (!checkbox.disabled) {
				checkbox.checked = selectAllCheckbox.checked;
			}
		});
		updateSaveSelectionButtonState();
		updateButtonVisibility();
	});

	// Event listener for individual checkboxes
	checkboxes.forEach(checkbox => {
		checkbox.addEventListener('change', function () {
			updateSelectAllCheckboxState();
			updateSaveSelectionButtonState();
			updateButtonVisibility();
		});
	});

	// Function to show/hide "Check-in" & "Check-out" buttons
	function updateButtonVisibility() {
		const atLeastOneEnabledCheckboxChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.some(checkbox => checkbox.checked);

		const completeButton = document.getElementById('completeButton');
		const completeButtonSmall = document.getElementById('completeButtonSmall');
		const addButton = document.getElementById('addButton');
		const addButtonSmall = document.getElementById('addButtonSmall');

		if (atLeastOneEnabledCheckboxChecked) {
			completeButton.style.display = 'block'; // Show the "Check-out Evacuee" button
			addButton.style.display = 'none'; // Hide the "Check-in Evacuee" button
			if (addButtonSmall) {
				addButtonSmall.style.display = 'none'; // Hide the "Small Check-in Evacuee" button if it exists
			}
			if (completeButtonSmall) {
				completeButtonSmall.style.display = 'block'; // Show the "Small Check-out Evacuee" button if it exists
			}
		} else {
			completeButton.style.display = 'none'; // Hide the "Check-out Evacuee" button
			addButton.style.display = 'block'; // Show the Check-in Evacuee button
			if (addButtonSmall) {
				addButtonSmall.style.display = 'block'; // Show the "Small Check-in Evacuee" button if it exists
			}
			if (completeButtonSmall) {
				completeButtonSmall.style.display = 'none'; // Hide the "Small Check-out Evacuee" button if it exists
			}
		}
	}

	// Hide the "Check-out Evacuee" button on page load
	window.onload = function () {
		updateButtonVisibility();
	};

	// Function to check "Select All" checkbox when all enabled checkboxes are checked
	function updateSelectAllCheckboxState() {
		const allEnabledCheckboxesChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.every(checkbox => checkbox.checked);
		selectAllCheckbox.checked = allEnabledCheckboxesChecked;
	}

	// Function to enable "Check-out" button when at least one enabled checkbox is cheked
	function updateSaveSelectionButtonState() {
		const atLeastOneEnabledCheckboxChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.some(checkbox => checkbox.checked);
		saveSelectionButton.disabled = !atLeastOneEnabledCheckboxChecked;
		if (saveSelectionButtonSmall) {
			saveSelectionButtonSmall.disabled = !atLeastOneEnabledCheckboxChecked;
		}
	}
</script>

<!-- Complete Assignment button in Modal -->
<script>
	document.getElementById('confirmSaveButton').addEventListener('click', function () {
		document.getElementById('completeAssign').submit();
	});
</script>

<!-- Confirm Delete -->
<script>
	const deleteButtons = document.querySelectorAll('.edit-button');
	let assignmentIdToDelete = null;
	let centerLogID = null;

	deleteButtons.forEach(function (button) {
		button.addEventListener('click', function () {
			assignmentIdToDelete = this.getAttribute('data-deleteid');
		});
	});

	// Function to prepare for delete action
	function prepareDelete(assignmentID) {
		if (assignmentID === null || assignmentID === undefined) {
			// Retrieve assignmentID from the button's data-deleteid attribute
			assignmentIdToDelete = event.currentTarget.getAttribute('data-deleteid');
		} else {
			assignmentIdToDelete = assignmentID;
		}

		// Retrieve centerLogID from the query string
		const urlParams = new URLSearchParams(window.location.search);
		centerLogID = urlParams.get("centerLogID");
	}

	const confirmDeleteButton = document.getElementById('confirmDeleteButton');

	confirmDeleteButton.addEventListener('click', function () {
		if (assignmentIdToDelete !== null) {
			window.location.href = "/disaster/profile/staffassignment/delete?assignmentID=" + assignmentIdToDelete + "&centerLogID=" + centerLogID;
		}
	});
</script>