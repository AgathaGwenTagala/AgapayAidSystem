@page
@model AgapayAidSystem.Pages.Disaster.IndexModel
@{
	ViewData["Title"] = "Disaster";
}

@if (!string.IsNullOrEmpty(Request.Query["successMessage"]))
{
	<div id="success-notification" class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-success alert-dismissible fade show" role="alert">
			<strong>@Request.Query["successMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>

	<script>
		const successNotification = document.getElementById('success-notification');
		if (successNotification) {
			setTimeout(function () {
				successNotification.style.display = 'none';
			}, 5000); // 5000 milliseconds = 5 seconds
		}
	</script>
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Model.errorMessage</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Request.Query["errorMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

<style>
	a {
		text-decoration: none;
		color: inherit;
	}

	.clickable-row:hover {
		cursor: pointer;
	}
</style>

<div class="container p-2">
	<div class="row pt-3">
		<div class="col">
			<div style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
				<ol class="breadcrumb">
					<li class="breadcrumb-item"><a class="nav-link text-muted" asp-area="" asp-page="/Index"><i class="bi bi-house-door-fill" style="padding: 5px;"></i>Home</a></li>
					<li class="breadcrumb-item active" aria-current="page" style="color: #3F8F8B;"><strong>Disaster</strong></li>
				</ol>
			</div>

			<!-- Search Bar -->
			<form id="search-form">
				<div class="input-group">
					<input type="search" class="form-control ds-input" id="search-bar" placeholder="Search disaster" aria-label="Search..." autocomplete="off" role="combobox" aria-autocomplete="list" aria-expanded="false" aria-owns="algolia-autocomplete-listbox-0" dir="auto" style="position: relative; vertical-align: top;">
					<button type="submit" class="btn btn-primary" id="search-button"><i class="bi bi-search"></i></button>
				</div>
			</form>
		</div>
	</div>

	<div class="row pt-4">
		<div class="col">
			<h1>Disaster</h1>
		</div>

		<div class="col-auto">
			<div class="d-flex justify-content-end align-items-center">
				<a class="btn btn-primary mb-2" href="/disaster/add"><i class="bi bi-plus-circle pt" style="padding: 5px;"></i> Add Disaster</a>
			</div>
		</div>
	</div>

	<div class="table-responsive">
		<table class="table align-middle table-hover" id="disaster-table" style="width:100%">
			<thead>
				<tr>
					<th>#</th>
					<th>
						<a asp-page="./index" asp-route-sortBy="disasterName" asp-route-sortOrder="@(Model.SortBy == "disasterName" && Model.SortOrder == "asc" ? "desc" : "asc")" onclick="toggleArrowIcons('disasterName')">
							Disaster Name
							<ion-icon id="disasterNameArrow" name="@(Model.SortBy == "disasterName" && Model.SortOrder == "asc" ? "arrow-up-outline" : "arrow-down-outline")"></ion-icon>
						</a>
					</th>
					<th>Type</th>
					<th>Description</th>
					<th>
						<a asp-page="./index" asp-route-sortBy="dateOccured" asp-route-sortOrder="@(Model.SortBy == "dateOccured" && Model.SortOrder == "asc" ? "desc" : "asc")" onclick="toggleArrowIcons('dateOccured')">
							Date Occured
							<ion-icon id="dateOccuredArrow" name="@(Model.SortBy == "dateOccured" && Model.SortOrder == "asc" ? "arrow-up-outline" : "arrow-down-outline")"></ion-icon>
						</a>
					</th>
				</tr>
			</thead>
			<tbody>
				@{ var counter = 1; }
				@foreach (var item in Model.listDisaster) {
					<tr data-id="@item.disasterID" class="data-row clickable-row">
						<td width="5%">@counter</td>
						<td width="20%">@item.disasterName</td>
						<td width="20%">@item.disasterType</td>
						<td width="35%">@item.description</td>
						<td width="20%">@item.dateOccured</td>
					</tr>
					counter++;
				}
			</tbody>
		</table>
	</div>
</div>

<!-- Modal: Confirm Delete -->
<div class="modal" id="deleteConfirmationModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete this disaster?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
			</div>
		</div>
	</div>
</div>

<!-- Sorting -->
<script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
<script>
	// Sort by
	let lastClickedHeader = null;

	function toggleArrowIcons(header) {
		// Get the arrow icons for all headers
		const centerNameArrow = document.getElementById('centerNameArrow');
		const maxCapacityArrow = document.getElementById('maxCapacityArrow');
		const statusArrow = document.getElementById('statusArrow');

		// Determine which header was clicked and toggle the arrow icons accordingly
		if (header === 'disasterName') {
			disasterNameArrow.style.display = disasterNameArrow.style.display === 'none' ? 'block' : 'none';
			dateOccuredArrow.style.display = 'none';
		} else if (header === 'dateOccured') {
			disasterNameArrow.style.display = 'none';
			dateOccuredArrow.style.display = statusArrow.style.display === 'none' ? 'block' : 'none';
		}

		// Update the last clicked header
		lastClickedHeader = header;
	}
</script>

<!-- Search -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		document.getElementById("search-form").addEventListener("submit", function (e) {
			e.preventDefault();
			const query = document.getElementById("search-bar").value;
			fetch(`/disaster?handler=Search&query=${query}`)
				.then(response => response.json())
				.then(data => {
					const tableBody = document.querySelector("table tbody");
					tableBody.innerHTML = "";
					let counter = 1;
					data.forEach(result => {
						const newRow = `<tr data-id="${result.disasterID}" class="data-row clickable-row">
											<td width="5%">${counter}</td>
											<td width="20%">${result.disasterName}</td>
											<td width="20%">${result.disasterType}</td>
											<td width="35%">${result.description}</td>
											<td width="20%">${result.dateOccured}</td>
										</tr>`;
						tableBody.innerHTML += newRow;
						counter++;
					});
				})
				.catch(error => {
					console.error("Error:", error);
				});
		});
	});
</script>

<!-- Clickable Row for Disaster Profile -->
<script>
	document.addEventListener("DOMContentLoaded", function () {
		const table = document.getElementById('disaster-table');

		table.addEventListener('click', function (event) {
			const clickedRow = event.target.closest('.data-row');

			if (clickedRow) {
				const disasterId = clickedRow.getAttribute("data-id");
				if (disasterId) {
					window.location.href = `/disaster/profile/index?disasterID=${disasterId}`;
				}
			}
		});
	});
</script>

<!-- Confirm Delete button in Modal -->
<script>
	const deleteButtons = document.querySelectorAll('.edit-button');
	let disasterIdToDelete = null;

	deleteButtons.forEach(function (button) {
		button.addEventListener('click', function () {
			disasterIdToDelete = this.getAttribute('data-deleteid');
		});
	});

	// Function to prepare for delete action
	function prepareDelete(disasterID) {
		if (disasterID === null || disasterID === undefined) {
			// Retrieve disasterID from the button's data-deleteid attribute
			disasterIdToDelete = event.currentTarget.getAttribute('data-deleteid');
		} else {
			disasterIdToDelete = disasterID;
		}
	}

	const confirmDeleteButton = document.getElementById('confirmDeleteButton');

	confirmDeleteButton.addEventListener('click', function () {
		if (disasterIdToDelete !== null) {
			window.location.href = "/disaster/delete?disasterID=" + disasterIdToDelete;
		}
	});
</script>