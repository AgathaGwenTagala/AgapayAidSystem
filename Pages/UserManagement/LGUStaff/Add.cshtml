@page
@model AgapayAidSystem.Pages.UserManagement.LGUStaff.AddModel
@{
	ViewData["Title"] = "Add User - LGU Staff";
}

@if (Model.UserType == "Admin")
{
    Layout = "_Layout";
}
else if (Model.UserType == "LGU Staff")
{
    Layout = "_Layout - LGU";
}
else if (Model.UserType == "EC Staff")
{
    Layout = "_Layout - ECStaff";
}
else
{
    Layout = "_Login";
}

<!-- Alert Banners -->
@if (!string.IsNullOrEmpty(Request.Query["successMessage"]))
{
    <div id="success-notification" class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <strong>@Request.Query["successMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>

    <script>
        const successNotification = document.getElementById('success-notification');
        if (successNotification) {
            setTimeout(function () {
                successNotification.style.display = 'none';
            }, 5000); // 5000 milliseconds = 5 seconds
        }
    </script>
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Model.errorMessage</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Request.Query["errorMessage"]</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

<div class="bg-light rounded px-2 py-0 my-3 text-center">
    <div class="col-lg-6 mx-auto">
        <form method="POST">
            <h1 class="display-5 fw-bold">Add New User</h1>
            <p class="form-label">LGU Staff</p>
            <br />

            <input type="hidden" name="userID" value="@Model.userID" />

            <!-- First Name -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="firstName">First Name:<span class="text-danger" style="padding:5px">*</span></label>
                <div class="col-sm-8">
                    <input type="text" id="firstName" name="firstName" class="form-control" required maxlength="65" />
                </div>
            </div>

            <!-- Middle Name -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="middleName">Middle Name:</label>
                <div class="col-sm-8">
                    <input type="text" id="middleName" name="middleName" class="form-control" maxlength="65" />
                </div>
            </div>

            <!-- Last Name -->
            <div class="row">
                <label class="col-sm-4 col-form-label text-start" for="lastName">Last Name:<span class="text-danger" style="padding:5px">*</span></label>
                <div class="col-sm-8">
                    <input type="text" id="lastName" name="lastName" class="form-control" required maxlength="65" />
                </div>
            </div>

            <!-- Extension Name -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="extName">Extension Name:</label>
                <div class="col-sm-8">
                    <input type="text" id="extName" name="extName" class="form-control" maxlength="45" />
                </div>
            </div>

            <!-- Sex -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start">
                    Sex <span class="text-danger" style="padding:5px">*</span>
                </label>
                <div class="col-sm-8 text-start mt-md-2">
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="sex" id="maleRadio" value="M" required>
                        <label class="form-check-label" for="maleRadio">Male</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="sex" id="femaleRadio" value="F" required>
                        <label class="form-check-label" for="femaleRadio">Female</label>
                    </div>
                </div>
            </div>

            <!-- Birthdate -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="birthdate">Birthdate:<span class="text-danger" style="padding:5px">*</span></label>
                <div class="col-sm-8">
                    @{
                        DateTime minDate = DateTime.Now.AddYears(-100);
                        string minDateString = minDate.ToString("yyyy-MM-dd");
                    }
                    <input type="date" class="form-control" name="birthdate" id="birthdate"
                           min="@minDateString" max="@DateTime.Now.ToString("yyyy-MM-dd")" required>
                </div>
            </div>

            <!-- Mobile Number -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="mobileNum">Mobile Num:<span class="text-danger" style="padding:5px">*</span></label>
                <div class="col-sm-8">
                    <input type="tel" id="mobileNum" name="mobileNum" class="form-control" required maxlength="11" pattern="[0-9]{11}" placeholder="09XXXXXXXXX" title="Enter digits only." />
                </div>
            </div>

            <!-- Email Address -->
            <div class="row mb-1">
                <label class="col-sm-4 col-form-label text-start" for="emailAddress">Email Address:<span class="text-danger" style="padding:5px">*</span></label>
                <div class="col-sm-8">
                    <input type="email" id="emailAddress" name="emailAddress" class="form-control" required maxlength="65" placeholder="example@email.com" />
                </div>
            </div>


            @if (!string.IsNullOrEmpty(Model.successMessage))
            {
                <div class="alert alert-success alert-dismissible fade show" role="alert">
                    <strong>@Model.successMessage</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }

            <br />

            <!-- Cancel and Save Button -->
            <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                <a href="/usermanagement/lgustaff/add?userID=@Model.userID&action=cancel&userIDToDelete=@Model.userID" 
                type="button" class="btn btn-outline-secondary px-4 gap-3" id="cancelBtn">Cancel</a>
                <button type="submit" class="btn btn-primary px-4" id="submitBtn">Add</button>
            </div>
        </form>
    </div>
</div>

<!-- Format Mobile Number -->
<script>
    const mobileInput = document.getElementById('mobileNum');

    // Set initial values when the input fields receive focus
    mobileInput.addEventListener('focus', function () {
        if (!this.value.startsWith('09')) {
            this.value = '09';
        }
    });

    mobileInput.addEventListener('input', function () {
        let cleanedValue = this.value.replace(/[^0-9]/g, '');

        if (cleanedValue.length >= 2) {
            cleanedValue = '09' + cleanedValue.slice(2);
        }

        this.value = cleanedValue.slice(0, 11);
    });
</script>

<!-- Enable/disable "Add" button -->
<script>
    const submitButton = document.getElementById('submitBtn');
    const form = document.querySelector('form');

    submitButton.disabled = true;

    function checkFormValidity() {
        if (form.checkValidity()) {
            submitButton.disabled = false;
        } else {
            submitButton.disabled = true;
        }
    }

    form.addEventListener('input', checkFormValidity);
</script>

<!-- Enable/disable "Cancel" and "Add" buttons -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const cancelButton = document.getElementById('cancelBtn');
        const saveButton = document.getElementById('submitBtn');
        const form = document.querySelector('form');

        cancelButton.addEventListener('click', function (event) {
            // Change the text and styling of the Cancel button
            cancelButton.classList.add('processing-btn');
            cancelButton.innerText = 'Processing...';

            // Disable the Save button to prevent multiple submissions
            saveButton.disabled = true;

            // Allow the default link behavior (redirect) after a short animation frame
            requestAnimationFrame(function () {
                window.location.href = cancelButton.getAttribute('href');
            });
        });

        saveButton.addEventListener('click', function () {
            // Disable both buttons to prevent multiple submissions
            cancelButton.classList.add('processing-btn');
            saveButton.disabled = true;

            // Change the text of the Save button
            saveButton.innerText = 'Processing...';

            // Submit the form
            form.submit();
        });
    });
</script>

<style>
    .processing-btn {
        pointer-events: none;
        opacity: 0.5;
    }
</style>
