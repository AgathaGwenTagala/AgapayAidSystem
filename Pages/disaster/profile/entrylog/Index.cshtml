@page
@model AgapayAidSystem.Pages.disaster.profile.entrylog.IndexModel
@{
	ViewData["Title"] = "Entry Log";
}

<!-- Alert Banners -->
@if (!string.IsNullOrEmpty(Request.Query["successMessage"]))
{
	<div id="success-notification" class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-success alert-dismissible fade show" role="alert">
			<strong>@Request.Query["successMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>

	<script>
		const successNotification = document.getElementById('success-notification');
		if (successNotification) {
			setTimeout(function () {
				successNotification.style.display = 'none';
			}, 5000); // 5000 milliseconds = 5 seconds
		}
	</script>
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Model.errorMessage</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Request.Query["errorMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

<div class="container-fluid">
	<input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
	<div class="row">
		<!-- Sidebar (desktop) -->
		<nav id="sidebar" class="col-md-3 col-lg-2 d-md-block d-none sidebar">
			<div class="position-sticky">
				<ul class="nav flex-column">
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/informationboard/index?centerLogID=@Model.logInfo.centerLogID">Information Board</a>
					</li>
					<li class="nav-item">
						<a class="nav-link active" href="/disaster/profile/entrylog/index?centerLogID=@Model.logInfo.centerLogID">Entry Log</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID">Staff Assignment</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">Inventory</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">Relief Goods Pack</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/reliefdistribution/index?centerLogID=@Model.logInfo.centerLogID">Relief Distribution</a>
					</li>
					<li class="nav-item">
						<a class="nav-link" href="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">Vulnerability Assessment</a>
					</li>
				</ul>
			</div>
		</nav>

		<!-- Sidebar (mobile) -->
		<div id="sidebarMobile" class="col-md-3 col-lg-2 d-md-none bg-light p-2">
			<select class="form-select" id="pageSelect">
				<option value="/disaster/profile/informationboard/index?centerLogID=@Model.logInfo.centerLogID">Information Board</option>
				<option value="/disaster/profile/entrylog/index?centerLogID=@Model.logInfo.centerLogID">Entry Log</option>
				<option value="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID">Staff Assignment</option>
				<option value="/disaster/profile/inventory/index?centerLogID=@Model.logInfo.centerLogID">Inventory</option>
				<option value="/disaster/profile/reliefgoodspack/index?centerLogID=@Model.logInfo.centerLogID">Relief Goods Pack</option>
				<option value="/disaster/profile/reliefdistribution/index?centerLogID=@Model.logInfo.centerLogID">Relief Distribution</option>
				<option value="/disaster/profile/vulnerabilityassessment/index?centerLogID=@Model.logInfo.centerLogID">Vulnerability Assessment</option>
			</select>
		</div>

		<!-- Page Content -->
		<div class="col-md-9 ms-sm-auto col-lg-10 px-md-4 pb-3 pt-3">
			<div class="container">
				<!-- Breadcrumb -->
				<div class="row pb-2" aria-label="breadcrumb">
					<nav style="--bs-breadcrumb-divider: '/';" aria-label="breadcrumb">
						<ol class="breadcrumb">
							<li class="breadcrumb-item"><a href="/index"><i class="bi bi-house-door-fill" style="padding: 5px;"></i>Home</a></li>
							<li class="breadcrumb-item"><a href="/disaster/index">Disaster</a></li>
							<li class="breadcrumb-item"><a href="/disaster/profile/index?disasterID=@Model.logInfo.disasterID">@Model.logInfo.disasterName</a></li>
							<li class="breadcrumb-item active"><a><strong>@Model.logInfo.centerName</strong></a></li>
						</ol>
					</nav>
				</div>

				<form method="POST" id="checkOut" style="padding: 0px;">
					<input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
					<!-- Title, Check-In and Check-Out Buttons -->
					<div class="row pb-2">
						<div class="col-12 d-flex justify-content-between align-items-center" style="gap: 30px">
							<div class="d-flex align-items-center">
								<h1>Entry Log</h1>
							</div>

							<div class="d-flex justify-content-between align-items-center">
								<a id="checkInButton" class="btn btn-primary mb-2" href="/disaster/profile/entrylog/checkin?centerLogID=@Model.logInfo.centerLogID">
									<i class="bi bi-plus-circle pt" style="padding: 5px;"></i> Check-in Evacuee
								</a>
								<button style="display: none;" type="button" class="btn btn-danger mb-2" name="saveSelection" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>
									<i class="bi bi-x-circle pt" style="padding: 5px;"></i> Check-out Evacuee
								</button>
							</div>
						</div>
					</div>

					<!-- Table -->
					<div class="col-lg-12">
						<table id="entrylog-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
							<thead>
								<tr>
									<th>
										<div class="form-check">
											<input class="form-check-input" type="checkbox" id="selectAllCheckboxes">
											<label class="form-check-label"></label>
										</div>
									</th>
									<th>Serial Number</th>
									<th>Name</th>
									<th style="text-align: center;">Remarks</th>
									<th style="text-align: center;">Status</th>
									<th></th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.listEntryLog)
								{
									<tr>
										<td width="5%">
											<div class="form-check">
												<input class="form-check-input" type="checkbox" value="@item.entryLogID"
													   name="selectedEvacuees[]" @((item.entryStatus == "Check-out") ? "disabled" : "")>
												<label class="form-check-label"></label>
											</div>
										</td>
										<td width="25%" style="text-align: center;">@item.serialNum	</td>
										<td width="35%">@item.fullName</td>
										<td width="20%">@item.remarks</td>
										<td width="15%" style="text-align: center;">
											@if (@item.entryStatus == "Check-in")
											{
												<span class="badge bg-success">@item.entryStatus</span>
											}
											else if (@item.entryStatus == "Check-out")
											{
												<span class="badge rounded-pill bg-light">@item.entryStatus</span>
											}
										</td>
										<td width="10%">
											<div class="d-inline position-relative">
												<a href="#" role="button" id="recordOptions" data-bs-toggle="dropdown" aria-expanded="false">
													<i class="bi bi-three-dots-vertical"></i>
												</a>
												<ul class="dropdown-menu" aria-labelledby="recordOptions">
													<li>
														<a class="dropdown-item" href="/family/index">View Profile</a>
													</li>
													<li>
														<a href="#" class="dropdown-item" onclick="showDatesPopup('@item.checkInDate', '@item.checkOutDate')"
														   data-bs-toggle="modal" data-bs-target="#datesModal">
														   View Entry Details
														</a>
													</li>
													<li>
														<a href="#" class="dropdown-item text-danger" onclick="prepareDelete('@item.entryLogID')"
														   data-deleteid="@item.entryLogID" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal">
															Delete
														</a>
													</li>
												</ul>
											</div>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

<!-- Modal: View Entry Details -->
<div class="modal fade" id="datesModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Entry Details</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p id="checkInDate"></p>
				<p id="checkOutDate"></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<!-- Entry Details Modal -->
<script>
	function showDatesPopup(checkInDate, checkOutDate) {
		// Set the content of the modal with the provided dates
		document.getElementById('checkInDate').innerText = 'Check-in Date: ' + checkInDate;
		document.getElementById('checkOutDate').innerText = 'Check-out Date: ' + checkOutDate;
	}
</script>

<!-- Modal: Confirm Check-out -->
<div class="modal" id="confirmSaveModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Check-out</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to check-out the selected evacuees?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmSaveButton">Check-out</button>
			</div>
		</div>
	</div>
</div>

<!-- Modal: Confirm Delete -->
<div class="modal" id="deleteConfirmationModal" tabindex="-1">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Delete</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p>Are you sure you want to delete this entry log?</p>
				<p><strong class="text-danger">This cannot be undone.</strong></p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmDeleteButton">Delete</button>
			</div>
		</div>
	</div>
</div>

<!-- Sidebar (Mobile) -->
<script>
	// Get the current page URL
	var currentPage = window.location.pathname.toLowerCase();

	// Get the select element
	var pageSelect = document.getElementById('pageSelect');

	// Loop through the options and set the selected attribute if it matches the current page
	for (var i = 0; i < pageSelect.options.length; i++) {
		if (pageSelect.options[i].value.toLowerCase().includes(currentPage)) {
			pageSelect.options[i].selected = true;
			break; // Exit the loop once the first match is found
		}
	}

	// Function to handle page redirection
	function redirectToSelectedPage() {
		var selectedOption = pageSelect.options[pageSelect.selectedIndex];
		var selectedValue = selectedOption.value;
		window.location.href = selectedValue;
	}

	// Attach the onchange event to the select element
	pageSelect.addEventListener('change', redirectToSelectedPage);
</script>

<!-- JS for Filter Button -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Making the table responsive -->
<script>
	$(document).ready(function () {
		var table = $('#entrylog-table').DataTable({
			responsive: true,
			columnDefs: [
				{ "orderable": true, "targets": [1, 2] }, // Sortable columns
				{ "orderable": false, "targets": [0, 3, 4, 5] } // Non-sortable columns
			],
			// Set initial sorting by the Check-in Date
			//order: [[1, 'asc']]
		});

		// Adding filters to specific columns
		table.columns([1, 3, 4]).every(function () {
			var column = this;
			
			// Create a container for the custom filter UI
			var filterContainer = $('<div class="dropdown"></div>').appendTo($(column.header()));

			// Create a button to toggle the dropdown
			var btn = $('<button class="btn dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="bi bi-funnel"></i></button>')
				.appendTo(filterContainer);

			// Create a dropdown menu
			var menu = $('<div class="dropdown-menu"></div>').appendTo(filterContainer);

			// Populate the dropdown menu with checkboxes
			column.data().unique().sort().each(function (d, j) {
				// Only add the options "Check-in" and "Check-out" for the "Status" column
				if (column.index() === 4) {
					// Set specific filter options only if they haven't been added
					if (menu.find("input[value='Check-in']").length === 0) {
						menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Check-in">' +
							'<label class="form-check-label">Check-in</label></div>');
					}
					if (menu.find("input[value='Check-out']").length === 0) {
						menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="Check-out">' +
							'<label class="form-check-label">Check-out</label></div>');
					}
				}
				// For other columns, show all unique values as filter options
				else {
					menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="' + d + '">' +
						'<label class="form-check-label">' + d + '</label></div>');
				}
			});

			// Add "Select All" option
			menu.prepend('<div class="form-check"><input class="form-check-input select-all" type="checkbox" value="select-all">' +
				'<label class="form-check-label">Select All</label></div>');

			// Add "Clear Filter" button with icon
			menu.append('<button type="button" class="btn clear-filter"><i class="bi bi-eraser"></i> Clear Filter</button>');
			
			// Handle click events on the checkboxes and "Clear Filter" button
			menu.find('.form-check-input, .clear-filter').on('click', function () {
				if ($(this).hasClass('form-check-input')) {
					// Handle checkboxes
					var checked = $(this).prop('checked');

					if ($(this).val() === 'select-all') {
						menu.find('.form-check-input').prop('checked', checked);
					} else {
						if (!checked) {
							menu.find('.form-check-input[value="select-all"]').prop('checked', false);
						}
					}
				} else {
					// Handle "Clear Filter" button
					menu.find('.form-check-input').prop('checked', false);
					menu.find('.form-check-input[value="select-all"]').prop('checked', false);
				}

				var selectedValues = menu.find('.form-check-input:checked').map(function () {
					return $(this).val();
				}).get();

				column
					.search(selectedValues.length > 0 ? '^(' + selectedValues.join('|') + ')$' : '', true, false)
					.draw();
			});
		});
	});
</script>

<!-- Select All checkboxes and Enable/disable "Check-out" button -->
<script>
	const selectAllCheckbox = document.getElementById('selectAllCheckboxes');
	const checkboxes = document.querySelectorAll('input[name="selectedEvacuees[]"]');
	const saveSelectionButton = document.querySelector('button[name="saveSelection"]');

	// Event listener for the "Select All" checkbox
	selectAllCheckbox.addEventListener('change', function () {
		checkboxes.forEach(checkbox => {
			if (!checkbox.disabled) {
				checkbox.checked = selectAllCheckbox.checked;
			}
		});
		updateSaveSelectionButtonState();
		updateButtonVisibility();
	});

	// Event listener for individual checkboxes
	checkboxes.forEach(checkbox => {
		checkbox.addEventListener('change', function () {
			updateSelectAllCheckboxState();
			updateSaveSelectionButtonState();
			updateButtonVisibility();
		});
	});

	// Function to show/hide "Check-in" & "Check-out" buttons
	function updateButtonVisibility() {
		const atLeastOneEnabledCheckboxChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.some(checkbox => checkbox.checked);

		const checkOutButton = document.querySelector('button[name="saveSelection"]');
		const checkInButton = document.getElementById('checkInButton');

		if (atLeastOneEnabledCheckboxChecked) {
			checkOutButton.style.display = 'block'; // Show the "Check-out Evacuee" button
			checkInButton.style.display = 'none'; // Hide the "Check-in Evacuee" button
		} else {
			checkOutButton.style.display = 'none'; // Hide the "Check-out Evacuee" button
			checkInButton.style.display = 'block'; // Show the Check-in Evacuee button
		}
	}

	// Function to check "Select All" checkbox when all enabled checkboxes are checked
	function updateSelectAllCheckboxState() {
		const allEnabledCheckboxesChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.every(checkbox => checkbox.checked);
		selectAllCheckbox.checked = allEnabledCheckboxesChecked;
	}

	// Function to enable "Check-out" button when at least one enabled checkbox is cheked
	function updateSaveSelectionButtonState() {
		const atLeastOneEnabledCheckboxChecked = Array.from(checkboxes)
			.filter(checkbox => !checkbox.disabled)
			.some(checkbox => checkbox.checked);
		saveSelectionButton.disabled = !atLeastOneEnabledCheckboxChecked;
	}
</script>

<!-- Check-out button in Modal -->
<script>
	document.getElementById('confirmSaveButton').addEventListener('click', function () {
		document.getElementById('checkOut').submit();
	});
</script>

<!-- Confirm Delete -->
<script>
	const deleteButtons = document.querySelectorAll('.edit-button');
	let entryLogIdToDelete = null;
	let centerLogID = null;

	deleteButtons.forEach(function (button) {
		button.addEventListener('click', function () {
			entryLogIdToDelete = this.getAttribute('data-deleteid');
		});
	});

	// Function to prepare for delete action
	function prepareDelete(entryLogID) {
		if (entryLogID === null || entryLogID === undefined) {
			// Retrieve entryLogID from the button's data-deleteid attribute
			entryLogIdToDelete = event.currentTarget.getAttribute('data-deleteid');
		} else {
			entryLogIdToDelete = entryLogID;
		}

		// Retrieve centerLogID from the query string
		const urlParams = new URLSearchParams(window.location.search);
		centerLogID = urlParams.get("centerLogID");
	}

	const confirmDeleteButton = document.getElementById('confirmDeleteButton');

	confirmDeleteButton.addEventListener('click', function () {
		if (entryLogIdToDelete !== null) {
			window.location.href = "/disaster/profile/entrylog/delete?entryLogID=" + entryLogIdToDelete + "&centerLogID=" + centerLogID;
		}
	});
</script>