@page
@model AgapayAidSystem.Pages.disaster.profile.staffassignment.AddModel
@{
	ViewData["Title"] = "Assign Staff";
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Model.errorMessage</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Request.Query["errorMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

<style>
    /* Adjust the size of the DataTable search input */
    div.dataTables_wrapper div.dataTables_filter input {
        width: 150px;
        margin-right: 10px;
    }
</style>

<div class="bg-light rounded px-2 py-0 my-3">
    <form method="POST" id="assignment">
        <h1 class="display-5 fw-bold text-center">Assign Staff</h1>
        <br />

        <input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
        <div class="row pt-4">
            <div class="col-lg-12">
                <table id="entrylog-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
                    <thead>
                        <tr>
                            <th>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAllCheckboxes">
                                    <label class="form-check-label"></label>
                                </div>
                            </th>
                            <th>Name</th>
                            <th>Sex</th>
                            <th>Birthdate</th>
                            <th>Assign a Role</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.listAvailable)
                        {
                            <tr>
                                <td width="5%">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" value="@item.ecStaffID" name="selectedStaff[]">
                                        <label class="form-check-label"></label>
                                    </div>
                                </td>
                                <td width="25%">@item.fullName</td>
                                <td width="15%">@item.sex</td>
                                <td width="25%">@item.birthdate</td>
                                <td>
                                    <select class="form-select role-select" name="role[]" required disabled>
                                        <option value="" selected disabled>Select a role</option>
                                        <option value="Manager">Manager</option>
                                        <option value="Asst. Manager">Asst. Manager</option>
                                        <option value="Staff">Staff</option>
                                    </select>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                <br />

                <!-- Cancel and Save Selection Button -->
                <div class="d-grid gap-2 d-sm-flex justify-content-sm-center">
                    <a href="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID" role="button" class="btn btn-outline-secondary px-4 gap-3">Cancel</a>
                    <button type="button" class="btn btn-primary px-4" name="saveSelection" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>
                        Assign
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

<!-- Modal: Confirm Assignment -->
<div class="modal" id="confirmSaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Assignment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to assign the selected staff members to @Model.logInfo.centerName?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSaveButton">Assign</button>
            </div>
        </div>
    </div>
</div>

<!-- Select All checkboxes and Enable/disable "Assign" button -->
<script>
    const selectAllCheckbox = document.getElementById('selectAllCheckboxes');
    const checkboxes = document.querySelectorAll('input[name="selectedStaff[]"]');
    const roleSelects = document.querySelectorAll('.role-select');
    const saveSelectionButton = document.querySelector('button[name="saveSelection"]');

    // Event listener for the "Select All" checkbox
    selectAllCheckbox.addEventListener('change', function () {
        checkboxes.forEach((checkbox, index) => {
            checkbox.checked = selectAllCheckbox.checked;
            roleSelects[index].disabled = !selectAllCheckbox.checked;
            if (!selectAllCheckbox.checked) {
                roleSelects[index].value = ""; // Reset the selected role when unchecked
            }
        });
        updateSaveSelectionButtonState();
    });

    // Event listener for individual checkboxes
    checkboxes.forEach((checkbox, index) => {
        checkbox.addEventListener('change', function () {
            updateSelectAllCheckboxState();
            updateSaveSelectionButtonState();
            roleSelects[index].disabled = !checkbox.checked;
            if (!checkbox.checked) {
                roleSelects[index].value = ""; // Reset the selected role when unchecked
            }
        });
    });

    // Event listener for role select elements
    roleSelects.forEach((roleSelect, index) => {
        roleSelect.addEventListener('change', function () {
            updateSaveSelectionButtonState();
        });
    });

    function updateSelectAllCheckboxState() {
        const allEnabledCheckboxesChecked = Array.from(checkboxes)
            .every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allEnabledCheckboxesChecked;
    }

    function updateSaveSelectionButtonState() {
        // Enable the "Check-in" button if for each checked checkbox, its corresponding role select has a value
        saveSelectionButton.disabled = Array.from(checkboxes).some((checkbox, index) => {
            return checkbox.checked && roleSelects[index].value === "";
        });
    }
</script>

<!-- Assign button in Modal -->
<script>
    document.getElementById('confirmSaveButton').addEventListener('click', function () {
        document.getElementById('assignment').submit();
    });
</script>

<!-- Making the table responsive -->
<script>
    $(document).ready(function () {
        var table = $('#entrylog-table').DataTable({
            responsive: true,
            pageLength: 100;
            columnDefs: [
                { "orderable": true, "targets": [1, 3, 4] }, // Sortable columns
                { "orderable": false, "targets": [0, 2] }, // Non-sortable columns
                { "responsivePriority": -1, "targets": [0, 4] } // Disable responsive for checkbox and role select column
            ],
            // Set initial sorting
            order: [[1, 'asc']]
        });

        table.columns([2]).every(function () {
            var column = this;
            var filterContainer = $('<div class="dropdown align-items-center d-inline-flex ps-2"></div>').appendTo($(column.header()));
            var btn = $('<button class="btn btn-sm btn-secondary" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="bi bi-funnel"></i></button>').appendTo(filterContainer);
            var menu = $('<div class="dropdown-menu p-3"></div>').appendTo(filterContainer);

            function updateFilterButton() {
                var hasActiveFilter = column.search() !== '';
                btn.toggleClass('btn-warning', hasActiveFilter);
            }

            column.data().unique().sort().each(function (d, j) {
                menu.append('<div class="form-check"><input class="form-check-input" type="checkbox" value="' + d + '">' +
                    '<label class="form-check-label ps-1">' + d + '</label></div>');
            });

            menu.prepend('<div class="form-check"><input class="form-check-input select-all" type="checkbox" value="select-all">' +
                '<label class="form-check-label ps-1">Select All</label></div>');

            menu.append('<hr class="dropdown-divider"><div class="p-1"><button type="button" class="btn btn-sm btn-light clear-filter"><i class="bi bi-eraser pe-1"></i>Clear Filter</button></div>');

            menu.find('.form-check-input, .clear-filter').on('click', function () {
                var checked = $(this).prop('checked');

                if ($(this).hasClass('form-check-input')) {
                    if ($(this).val() === 'select-all') {
                        menu.find('.form-check-input').prop('checked', checked);
                    } else if (!checked) {
                        menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                    }
                } else {
                    menu.find('.form-check-input').prop('checked', false);
                    menu.find('.form-check-input[value="select-all"]').prop('checked', false);
                }

                var selectedValues = menu.find('.form-check-input:checked').map(function () {
                    return $(this).val();
                }).get();

                column.search(selectedValues.length > 0 ? '^(' + selectedValues.join('|') + ')$' : '', true, false).draw();
                updateFilterButton();
            });
            updateFilterButton();
        });
    });
</script>