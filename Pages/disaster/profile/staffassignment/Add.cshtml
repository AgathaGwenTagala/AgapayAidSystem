@page
@model AgapayAidSystem.Pages.disaster.profile.staffassignment.AddModel
@{
	ViewData["Title"] = "Assign Staff";
}

@if (!string.IsNullOrEmpty(Model.errorMessage))
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
        <div class="alert alert-warning alert-dismissible fade show" role="alert">
            <strong>Error: @Model.errorMessage</strong>
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(Request.Query["errorMessage"]))
{
	<div class="position-fixed top-0 end-0 p-3" style="z-index: 1000;">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>Error: @Request.Query["errorMessage"]</strong>
			<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}

<div class="container p-2 form-container">
    <div class="container mt-4 form-container-content">
        <div class="row">
            <div class="col text-center">
                <h1>Assign Staff</h1>
            </div>
        </div>
        <form method="POST" id="assignment">
            <input type="hidden" name="centerLogID" value="@Model.logInfo.centerLogID" />
            <div class="row pt-4">
                <div class="col-lg-12">
                    <table id="entrylog-table" class="table display compact order-column table-hover" cellspacing="0" width="100%">
                        <thead>
                            <tr>
                                <th>
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAllCheckboxes">
                                        <label class="form-check-label"></label>
                                    </div>
                                </th>
                                <th>Name</th>
                                <th style="text-align: center;">Sex</th>
                                <th>Birthdate</th>
                                <th>Assign a Role</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.listAvailable)
                            {
                                <tr>
                                    <td width="5%">
                                        <div class="form-check">
                                            <input class="form-check-input" type="checkbox" value="@item.ecStaffID" name="selectedStaff[]">
                                            <label class="form-check-label"></label>
                                        </div>
                                    </td>
                                    <td width="25%">@item.fullName</td>
                                    <td width="15%" style="text-align: center;">@item.sex</td>
                                    <td width="25%">@item.birthdate</td>
                                    <td>
                                        <select class="form-select role-select" name="role[]" required disabled>
                                            <option value="" selected disabled>Select a role</option>
                                            <option value="Manager">Manager</option>
                                            <option value="Asst. Manager">Asst. Manager</option>
                                            <option value="Staff">Staff</option>
                                        </select>
                                    </td>
                                </tr>

                            }
                        </tbody>
                    </table>

                    <!-- Cancel and Assign Buttons -->
                    <div class="button-spacer">
                        <a class="btn btn-outline-secondary mr-10" href="/disaster/profile/staffassignment/index?centerLogID=@Model.logInfo.centerLogID">Cancel</a>
                        <button type="button" class="btn btn-primary" name="saveSelection" data-bs-toggle="modal" data-bs-target="#confirmSaveModal" disabled>Assign</button>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Modal: Confirm Assignment -->
<div class="modal" id="confirmSaveModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Assignment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to assign the selected staff members to @Model.logInfo.centerName?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmSaveButton">Assign</button>
            </div>
        </div>
    </div>
</div>

<!-- Select All checkboxes and Enable/disable "Assign" button -->
<script>
    const selectAllCheckbox = document.getElementById('selectAllCheckboxes');
    const checkboxes = document.querySelectorAll('input[name="selectedStaff[]"]');
    const roleSelects = document.querySelectorAll('.role-select');
    const saveSelectionButton = document.querySelector('button[name="saveSelection"]');

    // Event listener for the "Select All" checkbox
    selectAllCheckbox.addEventListener('change', function () {
        checkboxes.forEach((checkbox, index) => {
            if (!checkbox.disabled) {
                checkbox.checked = selectAllCheckbox.checked;
                roleSelects[index].disabled = !selectAllCheckbox.checked;
                if (!selectAllCheckbox.checked) {
                    roleSelects[index].value = ""; // Reset the selected role when unchecked
                }
            }
        });
        updateSaveSelectionButtonState();
    });

    // Event listener for individual checkboxes
    checkboxes.forEach((checkbox, index) => {
        checkbox.addEventListener('change', function () {
            updateSelectAllCheckboxState();
            updateSaveSelectionButtonState();
            roleSelects[index].disabled = !checkbox.checked;
            if (!checkbox.checked) {
                roleSelects[index].value = ""; // Reset the selected role when unchecked
            }
        });
    });

    // Event listener for role select elements
    roleSelects.forEach((roleSelect, index) => {
        roleSelect.addEventListener('change', function () {
            updateSaveSelectionButtonState();
        });
    });

    function updateSelectAllCheckboxState() {
        const allEnabledCheckboxesChecked = Array.from(checkboxes)
            .filter(checkbox => !checkbox.disabled)
            .every(checkbox => checkbox.checked);
        selectAllCheckbox.checked = allEnabledCheckboxesChecked;
    }

    function updateSaveSelectionButtonState() {
        const atLeastOneEnabledCheckboxChecked = Array.from(checkboxes)
            .filter(checkbox => !checkbox.disabled)
            .some(checkbox => checkbox.checked);

        // Check if all checked checkboxes have a selected role
        const allCheckedHaveRole = Array.from(checkboxes)
            .filter((checkbox, index) => checkbox.checked)
            .every((checkbox, index) => {
                return !roleSelects[index].disabled && roleSelects[index].value !== "";
            });

        // Enable the "Assign" button only if both conditions are met
        saveSelectionButton.disabled = !atLeastOneEnabledCheckboxChecked || !allCheckedHaveRole;
    }

</script>

<!-- Assign button in Modal -->
<script>
    document.getElementById('confirmSaveButton').addEventListener('click', function () {
        document.getElementById('assignment').submit();
    });
</script>

<!-- Making the table responsive -->
<script>
    $(document).ready(function () {
        $('#entrylog-table').DataTable({
            responsive: true,
            columnDefs: [
                { "orderable": true, "targets": [1, 3, 4] }, // Sortable columns
                { "orderable": false, "targets": [0, 2] } // Non-sortable columns
            ],
            // Set initial sorting
            order: [[1, 'asc']],
            language: {
                emptyTable: "There are no available EC staff members to assign.",
            }
        });
    });
</script>