using AgapayAidSystem.Pages.disaster.profile.staffassignment;
using AgapayAidSystem.Pages.Disaster.Profile;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using MySql.Data.MySqlClient;

namespace AgapayAidSystem.Pages.disaster.profile.vulnerabilityassessment
{
    public class IndexModel : PageModel
    {
		private readonly IConfiguration _configuration;
		public IndexModel(IConfiguration configuration) => _configuration = configuration;
		public EvacuationCenterLogInfo logInfo { get; set; } = new EvacuationCenterLogInfo();
		public EcLogNotification ecLogNotif { get; set; } = new EcLogNotification();
		public StaffAssignmentInfo assignmentInfo { get; set; } = new StaffAssignmentInfo();
		public List<AssessmentInfo> listAssessment { get; set; } = new List<AssessmentInfo>();
		public string errorMessage = "";
		public string successMessage = "";
        public string UserId { get; set; }
        public string UserType { get; set; }

        public void OnGet()
        {
            // Check if UserId is set in the session
            UserId = HttpContext.Session.GetString("UserId");
            UserType = HttpContext.Session.GetString("UserType");

            if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(UserType))
            {
                Response.Redirect("/login/index");
                return;
            }

            string centerLogID = Request.Query["centerLogID"];
			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();

					// Fetch assigned staff user information
					string assignedSql = "SELECT esa.* " +
										 "FROM ec_staff_assignment esa " +
										 "JOIN ec_staff ec ON esa.ecStaffID = ec.ecStaffID " +
										 "WHERE ec.userID = @userID AND esa.status = 'Assigned';";
					using (MySqlCommand assignedCommand = new MySqlCommand(assignedSql, connection))
					{
						assignedCommand.Parameters.AddWithValue("@userID", UserId);
						using (MySqlDataReader assignedReader = assignedCommand.ExecuteReader())
						{
							if (assignedReader.Read())
							{
								assignmentInfo.assignmentID = assignedReader.GetString(0);
								assignmentInfo.centerLogID = assignedReader.GetString(1);
								assignmentInfo.ecStaffID = assignedReader.GetString(2);
								assignmentInfo.role = assignedReader.GetString(3);
								assignmentInfo.assignmentDate = assignedReader.GetDateTime(4).ToString("yyyy-MM-dd hh:mm tt").ToUpper();
								assignmentInfo.completionDate = assignedReader.IsDBNull(5) ? null : assignedReader.GetDateTime(5).ToString("yyyy-MM-dd hh:mm tt").ToUpper();
								assignmentInfo.status = assignedReader.GetString(6);

								if (assignmentInfo.status != "Assigned")
								{
									Response.Redirect("/accessdenied");
									return;
								}

							}
						}
					}

					// Fetch ec log notification count
					string notifSql = "CALL get_eclog_notification(@centerLogID)";
					using (MySqlCommand notifCommand = new MySqlCommand(notifSql, connection))
					{
						notifCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader notifReader = notifCommand.ExecuteReader())
						{
							if (notifReader.Read())
							{
								ecLogNotif.remainingInventoryCount = notifReader.GetInt32(0);
								ecLogNotif.remainingPackCount = notifReader.GetInt32(1);
								ecLogNotif.remainingAssessmentCount = notifReader.GetInt32(2);
							}
						}
					}

					// Fetch info of selected center log from the database
					string logSql = "SELECT log.centerLogID, d.disasterID, d.disasterName, ec.centerName, log.status " +
									"FROM evacuation_center_log AS log " +
									"INNER JOIN evacuation_center AS ec ON log.centerID = ec.centerID " +
									"INNER JOIN disaster AS d ON log.disasterID = d.disasterID " +
									"WHERE log.centerLogID = @centerLogID";
					using (MySqlCommand logCommand = new MySqlCommand(logSql, connection))
					{
						logCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader logReader = logCommand.ExecuteReader())
						{
							if (logReader.Read())
							{
								logInfo.centerLogID = logReader.GetString(0);
								logInfo.disasterID = logReader.GetString(1);
								logInfo.disasterName = logReader.GetString(2);
								logInfo.centerName = logReader.GetString(3);
								logInfo.status = logReader.GetString(4);
							}
						}
					}

					// Fetch vulnerability assessment data related to the selected center log
					string assessSql = "SELECT * FROM vul_assessment_view " +
									   "WHERE centerLogID = @centerLogID;";
					using (MySqlCommand assessCommand = new MySqlCommand(assessSql, connection))
					{
						assessCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader assessReader = assessCommand.ExecuteReader())
						{
							while (assessReader.Read())
							{
								AssessmentInfo assessInfo = new AssessmentInfo();
								assessInfo.assessmentID = assessReader.GetString(0);
								assessInfo.centerLogID = assessReader.GetString(1);
								assessInfo.disasterName = assessReader.GetString(2);
								assessInfo.centerName = assessReader.GetString(3);
								assessInfo.familyID = assessReader.GetString(4);
								assessInfo.totalScore = assessReader.GetInt32(5).ToString();
								assessInfo.vulnerabilityLevel = assessReader.GetString(6);
								assessInfo.createdAt = assessReader.GetDateTime(7).ToString("yyyy-MM-dd hh:mm tt").ToUpper();
								assessInfo.serialNum = assessReader.GetString(8);
								assessInfo.familyHead = assessReader.GetString(9);
								listAssessment.Add(assessInfo);
							}
						}
					}
				}
			}

			catch (Exception ex)
			{
				errorMessage = ex.Message;
			}
		}

		public int GetRemainingInventoryCount()
		{
			string centerLogID = Request.Query["centerLogID"];
			string sql = "SELECT count(*) FROM inventory_item_view " +
						 "WHERE centerLogID = @centerLogID AND remainingQty > 0;";
			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();
					using (MySqlCommand command = new MySqlCommand(sql, connection))
					{
						command.Parameters.AddWithValue("@centerLogID", centerLogID);
						return Convert.ToInt32(command.ExecuteScalar());
					}
				}
			}
			catch (Exception ex)
			{
				errorMessage = ex.Message;
				return 0;
			}
		}

		public int GetRemainingPackCount()
		{
			string centerLogID = Request.Query["centerLogID"];
			string sql = "SELECT count(*) AS remainingPacks FROM pack " +
						 "WHERE centerLogID = @centerLogID AND status = 'Packed';";
			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();
					using (MySqlCommand command = new MySqlCommand(sql, connection))
					{
						command.Parameters.AddWithValue("@centerLogID", centerLogID);
						return Convert.ToInt32(command.ExecuteScalar());
					}
				}
			}
			catch (Exception ex)
			{
				errorMessage = ex.Message;
				return 0;
			}
		}

		public int GetRemainingAssessmentCount()
		{
			string centerLogID = Request.Query["centerLogID"];
			string sql = "SELECT count(*) AS remainingAssessment FROM distinct_family_head_view " +
						 "WHERE centerLogID = @centerLogID;";
			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();
					using (MySqlCommand command = new MySqlCommand(sql, connection))
					{
						command.Parameters.AddWithValue("@centerLogID", centerLogID);
						return Convert.ToInt32(command.ExecuteScalar());
					}
				}
			}
			catch (Exception ex)
			{
				errorMessage = ex.Message;
				return 0;
			}
		}
	}

	public class AssessmentInfo
	{
		public string assessmentID { get; set; }
		public string centerLogID { get; set; }
		public string disasterName { get; set; }
		public string centerName { get; set; }
		public string familyID { get; set; }
		public string totalScore { get; set; }
		public string vulnerabilityLevel { get; set; }
		public string createdAt { get; set; }
		public string serialNum { get; set; }
		public string familyHead { get; set; }
	}
}
