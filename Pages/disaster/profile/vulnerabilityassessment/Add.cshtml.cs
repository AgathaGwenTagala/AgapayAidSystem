using AgapayAidSystem.Pages.account;
using AgapayAidSystem.Pages.disaster.profile.reliefgoodspack;
using AgapayAidSystem.Pages.disaster.profile.staffassignment;
using AgapayAidSystem.Pages.Disaster.Profile;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using MySql.Data.MySqlClient;
using Org.BouncyCastle.Bcpg;

namespace AgapayAidSystem.Pages.disaster.profile.vulnerabilityassessment
{
    public class AddModel : PageModel
    {
		private readonly IConfiguration _configuration;
		public AddModel(IConfiguration configuration) => _configuration = configuration;
		public EvacuationCenterLogInfo logInfo { get; set; } = new EvacuationCenterLogInfo();
		public StaffAssignmentInfo assignmentInfo { get; set; } = new StaffAssignmentInfo();
		public List<VulneFamInfo> listVulneFam { get; set; } = new List<VulneFamInfo>();
		public List<QuestionInfo> listPrimary { get; set; } = new List<QuestionInfo>();
		public List<QuestionInfo> listSecondary { get; set; } = new List<QuestionInfo>();
		public string errorMessage = "";
		public string successMessage = "";
        public string? UserId { get; set; }
        public string? UserType { get; set; }

        public void OnGet()
        {
            // Check if UserId is set in the session
            UserId = HttpContext.Session.GetString("UserId");
            UserType = HttpContext.Session.GetString("UserType");

            if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(UserType))
            {
                Response.Redirect("/login/index");
                return;
            }

            string centerLogID = Request.Query["centerLogID"];
			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();

					// Fetch assigned staff user information
					string assignedSql = "SELECT esa.* " +
										 "FROM ec_staff_assignment esa " +
										 "JOIN ec_staff ec ON esa.ecStaffID = ec.ecStaffID " +
										 "WHERE ec.userID = @userID AND esa.status = 'Assigned';";
					using (MySqlCommand assignedCommand = new MySqlCommand(assignedSql, connection))
					{
						assignedCommand.Parameters.AddWithValue("@userID", UserId);
						using (MySqlDataReader assignedReader = assignedCommand.ExecuteReader())
						{
							if (assignedReader.Read())
							{
								assignmentInfo.assignmentID = assignedReader.GetString(0);
								assignmentInfo.centerLogID = assignedReader.GetString(1);
								assignmentInfo.ecStaffID = assignedReader.GetString(2);
								assignmentInfo.role = assignedReader.GetString(3);
								assignmentInfo.assignmentDate = assignedReader.GetDateTime(4).ToString("yyyy-MM-dd hh:mm tt").ToUpper();
								assignmentInfo.completionDate = assignedReader.IsDBNull(5) ? null : assignedReader.GetDateTime(5).ToString("yyyy-MM-dd hh:mm tt").ToUpper();
								assignmentInfo.status = assignedReader.GetString(6);

								if (assignmentInfo.status != "Assigned")
								{
									Response.Redirect("/accessdenied");
									return;
								}

							}
						}
					}

					// Fetch info of selected center log from the database
					string logSql = "SELECT log.centerLogID, d.disasterID, d.disasterName, ec.centerName " +
									"FROM evacuation_center_log AS log " +
									"INNER JOIN evacuation_center AS ec ON log.centerID = ec.centerID " +
									"INNER JOIN disaster AS d ON log.disasterID = d.disasterID " +
									"WHERE log.centerLogID = @centerLogID";
					using (MySqlCommand logCommand = new MySqlCommand(logSql, connection))
					{
						logCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader logReader = logCommand.ExecuteReader())
						{
							if (logReader.Read())
							{
								logInfo.centerLogID = logReader.GetString(0);
								logInfo.disasterID = logReader.GetString(1);
								logInfo.disasterName = logReader.GetString(2);
								logInfo.centerName = logReader.GetString(3);
							}
						}
					}

					// Fetch distinct families related to the selected center log
					string vulneFamSql = "SELECT * FROM distinct_family_head_view " +
										 "WHERE centerLogID = @centerLogID " +
										 "ORDER BY familyHead;";
					using (MySqlCommand vulneFamCommand = new MySqlCommand(vulneFamSql, connection))
					{
						vulneFamCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader vulneFamReader = vulneFamCommand.ExecuteReader())
						{
							while (vulneFamReader.Read())
							{
								VulneFamInfo vulneFamInfo = new VulneFamInfo();
								vulneFamInfo.familyID = vulneFamReader.GetString(0);
								vulneFamInfo.serialNum = vulneFamReader.GetString(1);
								vulneFamInfo.centerLogID = vulneFamReader.GetString(2);
								vulneFamInfo.familyHead = vulneFamReader.GetString(3);
								listVulneFam.Add(vulneFamInfo);
							}
						}
					}

					// Fetch primary questions
					string questionSql = "SELECT * FROM vul_questions WHERE category = 'Primary';";
					using (MySqlCommand questionCommand = new MySqlCommand(questionSql, connection))
					{
						questionCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader questionReader = questionCommand.ExecuteReader())
						{
							while (questionReader.Read())
							{
								QuestionInfo questionInfo = new QuestionInfo();
								questionInfo.questionID = questionReader.GetString(0);
								questionInfo.category = questionReader.GetString(1);
								questionInfo.questionText = questionReader.GetString(2);
								questionInfo.yesScore = questionReader.GetInt32(3).ToString();
								questionInfo.noScore = questionReader.GetInt32(4).ToString();
								listPrimary.Add(questionInfo);
							}
						}
					}

					// Fetch secondary questions
					string question2Sql = "SELECT * FROM vul_questions WHERE category = 'Secondary';";
					using (MySqlCommand question2Command = new MySqlCommand(question2Sql, connection))
					{
						question2Command.Parameters.AddWithValue("@centerLogID", centerLogID);
						using (MySqlDataReader question2Reader = question2Command.ExecuteReader())
						{
							while (question2Reader.Read())
							{
								QuestionInfo question2Info = new QuestionInfo();
								question2Info.questionID = question2Reader.GetString(0);
								question2Info.category = question2Reader.GetString(1);
								question2Info.questionText = question2Reader.GetString(2);
								question2Info.yesScore = question2Reader.GetInt32(3).ToString();
								question2Info.noScore = question2Reader.GetInt32(4).ToString();
								listSecondary.Add(question2Info);
							}
						}
					}
				}
			}

			catch (Exception ex)
			{
				errorMessage = ex.Message;
			}
		}

		public void OnPost()
		{
			bool errorOccurred = false;

			if (!ModelState.IsValid)
			{
				errorMessage = "Please correct the errors below.";
				errorOccurred = true;
			}

			string centerLogID = Request.Query["centerLogID"];
			string familyID = Request.Form["familyID"];

			if (string.IsNullOrEmpty(centerLogID))
			{
				errorMessage = "Missing centerLogID";
				errorOccurred = true;
			}

			if (string.IsNullOrEmpty(familyID))
			{
				errorMessage = "Missing familyID";
				errorOccurred = true;
			}

			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();

					// Step 1: Insert into the 'vul_assessment' table
					string insertPackSql = "INSERT INTO vul_assessment (centerLogID, familyID) " +
										   "VALUES (@centerLogID, @familyID)";
					using (MySqlCommand insertPackCommand = new MySqlCommand(insertPackSql, connection))
					{
						insertPackCommand.Parameters.AddWithValue("@centerLogID", centerLogID);
						insertPackCommand.Parameters.AddWithValue("@familyID", familyID);
						insertPackCommand.ExecuteNonQuery();
						// Console.WriteLine("Successfully inserted into 'vul_assessment' table.");
					}

					// Step 2: Retrieve the last inserted assessmentID from the 'vul_assessment' table
					string? newAssessmentID;
					string selectMaxAssessmentIDSql = "SELECT MAX(assessmentID) FROM vul_assessment WHERE familyID = @familyID";
					using (MySqlCommand selectMaxAssessmentID = new MySqlCommand(selectMaxAssessmentIDSql, connection))
					{
						selectMaxAssessmentID.Parameters.AddWithValue("@familyID", familyID);
						newAssessmentID = selectMaxAssessmentID.ExecuteScalar()?.ToString();
					}
					// Console.WriteLine($"Retrieved new assessmentID: {newAssessmentID} with familyID {familyID}");

					// Step 3: Insert the answers to 'vul_answer' table
					foreach (var key in Request.Form.Keys)
					{
						if (key.StartsWith("q"))
						{
							string questionID = key;
							string answer = Request.Form[key];

							// Insert into 'vul_answers' table
							string insertAnswerSql = "INSERT INTO vul_answers (assessmentID, questionID, answer) " +
													 "VALUES (@assessmentID, @questionID, @answer)";
							using (MySqlCommand insertAnswerCommand = new MySqlCommand(insertAnswerSql, connection))
							{
								insertAnswerCommand.Parameters.AddWithValue("@assessmentID", newAssessmentID);
								insertAnswerCommand.Parameters.AddWithValue("@questionID", questionID);
								insertAnswerCommand.Parameters.AddWithValue("@answer", answer);
								insertAnswerCommand.ExecuteNonQuery();
								// Console.WriteLine($"Successfully inserted answer for questionID {questionID}");
							}
						}
					}

					// Step 4: Update the 'vul_assessment' table of the newAssessmentID
					string updateAssessmentSql = "UPDATE vul_assessment SET totalScore = @totalScore, vulnerabilityLevel = @vulnerabilityLevel " +
												 "WHERE assessmentID = @assessmentID";
					using (MySqlCommand updateAssessmentCommand = new MySqlCommand(updateAssessmentSql, connection))
					{
						updateAssessmentCommand.Parameters.AddWithValue("@assessmentID", newAssessmentID);

						// Calculate total score and vulnerability level based on your busin// Calculate total score and vulnerability level based on the answers
						int totalScore = CalculateTotalScore(newAssessmentID);
						string vulnerabilityLevel = CalculateVulnerabilityLevel(totalScore);

						updateAssessmentCommand.Parameters.AddWithValue("@totalScore", totalScore);
						updateAssessmentCommand.Parameters.AddWithValue("@vulnerabilityLevel", vulnerabilityLevel);

						updateAssessmentCommand.ExecuteNonQuery();
						// Console.WriteLine($"Successfully updated 'vul_assessment' for assessmentID {newAssessmentID}");
					}

					successMessage = "Vulnerability assessment added successfully!";
				}
			}

			catch (Exception ex)
			{
				errorMessage = ex.Message;
				errorOccurred = true;
			}

			if (errorOccurred)
			{
				// Show an error message banner on the current page
				Response.Redirect("/disaster/profile/vulnerabilityassessment/add?centerLogID=" + centerLogID + "&errorMessage=" + errorMessage);
			}
			else
			{
				// Redirect to the Vulnerability Assessment page after successful add
				Response.Redirect("/disaster/profile/vulnerabilityassessment/index?centerLogID=" + centerLogID + "&successMessage=" + successMessage);
			}
		}

		public int CalculateTotalScore(string? assessmentID)
		{
			int totalScore = 0;

			try
			{
				string connectionString = _configuration.GetConnectionString("DefaultConnection");
				using (MySqlConnection connection = new MySqlConnection(connectionString))
				{
					connection.Open();

					string selectTotalScoreSql = "SELECT SUM(score) FROM vul_answers WHERE assessmentID = @assessmentID";

					using (MySqlCommand selectTotalScoreCommand = new MySqlCommand(selectTotalScoreSql, connection))
					{
						selectTotalScoreCommand.Parameters.AddWithValue("@assessmentID", assessmentID);
						var result = selectTotalScoreCommand.ExecuteScalar();

						if (result != null && result != DBNull.Value)
						{
							totalScore = Convert.ToInt32(result);
						}
					}
				}
			}
			catch (Exception ex)
			{
				// Handle the exception or log it as needed
				// Console.WriteLine($"Error calculating total score: {ex.Message}");
				errorMessage = "Error calculating total score: " + ex.Message;
			}

			return totalScore;
		}
		
		public string CalculateVulnerabilityLevel(int totalScore)
		{
			string vulnerabilityLevel;

			if (totalScore >= 0 && totalScore <= 9)
			{
				vulnerabilityLevel = "Low";
			}
			else if (totalScore >= 10 && totalScore <= 18)
			{
				vulnerabilityLevel = "Medium";
			}
			else if (totalScore >= 19 && totalScore <= 27)
			{
				vulnerabilityLevel = "High";
			}
			else
			{
				vulnerabilityLevel = "None";
			}

			return vulnerabilityLevel;
		}

	}

	public class QuestionInfo
	{
		public string? questionID { get; set; }
		public string? category { get; set; }
		public string? questionText { get; set; }
		public string? yesScore { get; set; }
		public string? noScore { get; set; }
	}

	public class VulneFamInfo
	{
		public string? familyID { get; set;}
		public string? serialNum { get; set;}
		public string? centerLogID { get; set;}
		public string? familyHead { get; set;}
	}
}
